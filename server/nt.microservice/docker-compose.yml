version: '3.9'

services:

  # APPLICATION SERVICES

  ###############################################################################################################
  # Gateway - Application API Gateway
  ############################################################################################################### 

  # Service
  nt.gateway.service:
    image: ${DOCKER_REGISTRY-}ntgateway
    container_name: nt.gateway.service
    hostname: nt.gateway.service
    build:
      context: .
      dockerfile: infrastructure/nt.gateway/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      # volumes:
      #  - ${APPDATA}/ASP.NET/Https:/root/.aspnet/https:ro
      #  - ~/.aspnet/https:/root/.aspnet/https:ro
    networks:
      nt.common.network:
    depends_on:
      - "nt.authservice.service"
      - "nt.userservice.service" 
    ports:
      - "8001:80" 
      # - "9001:443"
   
  ###############################################################################################################
  # Aggregator Services
  ###############################################################################################################
  nt.useridentityaggregator.service:
    image: ${DOCKER_REGISTRY-}useridentityaggregator
    hostname: nt.useridentityaggregator.service
    container_name: nt.useridentityaggregator.service
    build:
        context: .
        dockerfile: aggregatorservices/UserIdentityAggregatorService/UserIdentityAggregatorService.Api/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080;https://+:8079
    networks:
      nt.common.network:
    depends_on:
      - "nt.authservice.service"
      - "nt.userservice.service" 
    ports:
      # - "8000-8099:80"
      - "8002:8080" 
      - "8003:8079" 
 

  ###############################################################################################################
  # Authentication Service : Responsible for handling Authentication
  ###############################################################################################################
  
  # AuthService: Service 
  nt.authservice.service:
    image: ${DOCKER_REGISTRY-}authserviceapi
    hostname: nt.authservice.service
    build:
      context: .
      dockerfile: services/AuthService/AuthService.Api/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - RUNNING_WITH=docker 
    volumes:
      - ${APPDATA}/ASP.NET/Https:/root/.aspnet/https:ro
      - ~/.aspnet/https:/root/.aspnet/https:ro
    networks:
      nt.common.network:
      nt.authservice.network:
    depends_on:
      - nt.authservice.db
      - nt.common.rabbitmq 
      #- "nt.authservice.log.db"
    expose: 
      - "80"
    # ports:
      # - "8101-8105:80"
      # - "9002:443"


  # AuthService: Load Balancer
  nt.authservice.loadbalancer:
    image: nginx:latest
    hostname: nt.authservice.loadbalancer
    container_name: nt.authservice.loadbalancer
    volumes:
        # - ./services/AuthService/AuthService.LoadBalancer/nginx:/etc/nginx/nginx.conf:ro
        - ./services/AuthService/AuthService.LoadBalancer/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - nt.authservice.service
    networks:
      nt.common.network:
      nt.authservice.network:
    ports:
        - "8100:80" 

  # AuthService: Database
  nt.authservice.db:
    image: postgres:14.1-alpine
    container_name: nt.authservice.db
    hostname: nt.authservice.db
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=Admin123
      - POSTGRES_DB=ntuserauth
    volumes:
      - nt.authservice.db.volume:/var/lib/postgresql/data
      - ./services/db/scripts:/docker-entrypoint-initdb.d
    networks:
      nt.authservice.network:
    ports:
      - '5432:5432'



  nt.authservice.sidecar:
    build:
      context: .
      dockerfile: services/AuthService/AuthService.LoadBalancer.ServiceDiscoverySideCar/Dockerfile
    container_name: nt.authservice.sidecar
    depends_on:
      - nt.authservice.loadbalancer
      - nt.common.servicediscovery
    networks:
      nt.common.network:
      nt.authservice.network:
    environment:
      - DOTNET_ENVIRONMENT=Production 


  # AuthService: PgAdmin to manage Postgres Database
  nt.common.pgadmin:
    image: dpage/pgadmin4:latest
    container_name: nt.common.pgadmin
    hostname: nt.common.pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=anu.viswan@gmail.com
      - PGADMIN_DEFAULT_PASSWORD=Admin123
    networks:
      nt.common.network:
      nt.authservice.network:
    ports:
      - '5050:80'

  ## AuthService: Log Database for Authentication Service
  #nt.authservice.log.db:
  #  image: mongo:latest
  #  hostname : nt.authservice.log.db
  #  restart: always
  #  environment:
  #    MONGO_INITDB_ROOT_USERNAME: root
  #    MONGO_INITDB_ROOT_PASSWORD: admin123
  #  networks:
  #    nt.authservice.network:
  #  volumes:
  #    - nt.authservice.log.db.volume:/data/db

  ###############################################################################################################
  # User Service : Responsible for User Management
  ###############################################################################################################
  
  # UserService: Service 
  nt.userservice.service:
    image: ${DOCKER_REGISTRY-}userserviceapi
    container_name: nt.userservice.service
    hostname: nt.userservice.service
    build:
      context: .
      dockerfile: services/UserService/UserService.Api/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - RUNNING_WITH=docker 
    networks:
      nt.common.network:
      nt.userservice.network:
    depends_on:
        - "nt.common.rabbitmq"
        - "nt.userservice.db"
    volumes:
      - ${APPDATA}/Microsoft/UserSecrets:/root/.microsoft/usersecrets:ro
      - ${APPDATA}/ASP.NET/Https:/root/.aspnet/https:ro
    ports:
      - "8301:80"
      # - "9003:443"


  # UserService: BlobService for Images
  nt.userservice.blobstorage:
    image: mcr.microsoft.com/azure-storage/azurite
    container_name: nt.userservice.blobstorage
    hostname: ntuserserviceblobstorage
    volumes:
      - ./localstorage/data:/data
    command: "azurite-blob --blobHost 0.0.0.0 -l /data"
    ports:
      - "10000:10000"
      - "10001:10001"    
    networks:
      nt.userservice.network: 

  # UserService: Database
  nt.userservice.db:
    image: mcr.microsoft.com/mssql/server:2019-latest
    container_name: nt.userservice.db
    hostname: nt.userservice.db
    networks:
        nt.common.network:
        nt.userservice.network:
    environment:
       ACCEPT_EULA: Y
       MSSQL_SA_PASSWORD: Admin123 
    ports:
        - 1433:1433  


  ###############################################################################################################
  # Movie Service : Responsible for Movie
  ###############################################################################################################

  # MovieService: Service 
  nt.movieservice.service:
    image: ${DOCKER_REGISTRY-}movieserviceapi
    container_name: nt.movieservice.service
    hostname: nt.movieservice.service
    build:
      context: .
      dockerfile: services/MovieService/MovieService.Api/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
    networks:
      nt.common.network:
      nt.movieservice.network:
    depends_on:
        - "nt.movieservice.db"
    volumes:
      - ${APPDATA}/Microsoft/UserSecrets:/root/.microsoft/usersecrets:ro
      - ${APPDATA}/ASP.NET/Https:/root/.aspnet/https:ro
    ports:
      - "8401:80"
      # - "9003:443"
 
  # MovieService: Database
  nt.movieservice.db:
    image: mongo:latest
    hostname : nt.movieservice.db
    container_name : nt.movieservice.db
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: mypass
    networks:
      nt.movieservice.network:
    ports:
      - "27017:27017"
    volumes:
         - nt.movieservice.db.volume:/data/db
    # command: ["bash", "-c", "mongod --bind_ip_all & sleep 5 && bash /services/MovieService/MovieService.Data/Seed/init-mongo.sh"]

  # MovieService: Database Management Tool
  nt.movieservice.db.manager:
    image: mongo-express
    hostname: nt.movieservice.db.manager
    container_name: nt.movieservice.db.manager
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: mypass
      # ME_CONFIG_MONGODB_URL: mongodb://root:mypass@nt:27017/
      ME_CONFIG_BASICAUTH: false
      ME_CONFIG_MONGODB_SERVER: nt.movieservice.db  # MongoDB service name
      ME_CONFIG_MONGODB_PORT: 27017  # MongoDB port
    networks:
      nt.movieservice.network:
    depends_on:
      - nt.movieservice.db


  ###############################################################################################################
  # Review Service : Responsible for Reviews
  ###############################################################################################################

  reviewservice.presenation.api:
    image: ${DOCKER_REGISTRY-}reviewservicepresenationapi
    build:
      context: .
      dockerfile: services/ReviewService/ReviewService.Presentation.Api/Dockerfile

  nt.reviewservice.db:
    image: mongo:latest
    hostname : nt.reviewservice.db
    container_name : nt.reviewservice.db
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: mypass
    networks:
      nt.reviewservice.network:
    ports:
      - "27018:27017"
    volumes:
         - nt.movieservice.db.volume:/data/db
 
  nt.reviewservice.db.manager:
    image: mongo-express
    hostname: nt.reviewservice.db.manager
    container_name: nt.reviewservice.db.manager
    restart: always
    ports:
      - 8082:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: mypass
      # ME_CONFIG_MONGODB_URL: mongodb://root:mypass@nt:27017/
      ME_CONFIG_BASICAUTH: false
      ME_CONFIG_MONGODB_SERVER: nt.movieservice.db  # MongoDB service name
      ME_CONFIG_MONGODB_PORT: 27018  # MongoDB port
    networks:
      nt.reviewservice.network:
    depends_on:
      - nt.reviewservice.db

  nt.reviewservice.cache:
    image: redis:latest
    container_name: nt.reviewservice.cache
    hostname: nt.reviewservice.cache
    networks:
      nt.reviewservice.network:
    ports:
      - "6379:6379"
    command: ["redis-server", "--requirepass", "Password123"]
    environment:
      - Redis__Host=review-redis
      - Redis__Port=6379

  nt.reviewservice.cache.insight:
    image: redis/redisinsight:latest
    container_name: redis-insight
    ports:
      - "8083:8081"
    depends_on:
      - nt.reviewservice.cache
    environment:
      - REDIS_HOST=review-redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=Password123
    networks:
      nt.reviewservice.network: 

  nt.reviewservice.cache.commander:
    image: rediscommander/redis-commander:latest
    container_name: nt.reviewservice.cache.commander
    ports:
      - "8084:8081"
    environment:
      - REDIS_HOSTS=local:review-redis:6379:Password123
    depends_on:
      - nt.reviewservice.cache 
    networks:
      nt.reviewservice.network:


  ###############################################################################################################
  # Infrastructure Services
  ###############################################################################################################
  
  # RabbitMq : Aschronous Messaging Services

  # $ docker run -d --hostname demo-rabbit --name demo-rabbit -e RABBITMQ_DEFAULT_USER=user -e RABBITMQ_DEFAULT_PASS=password -p 15672:15672 rabbitmq:3-management
  # ntuser/pass
  # administrator/pass
  nt.common.rabbitmq:
    image: "rabbitmq:3.10.6-management-alpine"
    container_name: nt.common.rabbitmq
    hostname: nt.common.rabbitmq
    networks:
        nt.common.network:
        nt.userservice.network:
        nt.authservice.network:
    volumes:
      - type: bind
        source: ./services/transportservices/rabbitmq-enabled-plugins
        target: /etc/rabbitmq/enabled_plugins
      - type: bind
        source: ./services/transportservices/rabbitmq.config
        target: /etc/rabbitmq/rabbitmq.conf
      - type: bind
        source: ./services/transportservices/rabbitmq-defs.json
        target: /etc/rabbitmq/definitions.json
    ports:
      - 5672:5672
      - 15672:15672

  
  # Portainer
  nt.common.portainer:
    image: portainer/portainer-ce
    container_name: nt.common.portainer
    restart: always
    hostname : nt.common.portainer
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - nt.common.portainer.volume:/data
    ports:
      - "8080:8000"
      - "9000:9000"

  

  # # Prometheus 
  # nt.common.prometheus:
  #   image: prom/prometheus:latest
  #   hostname: nt.common.prometheus
  #   container_name: nt.common.prometheus
  #   volumes:
  #       - ./services/monitoringservices/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
  #   command:
  #         - '--config.file=/etc/prometheus/prometheus.yml'
  #   ports:
  #       - '9090:9090'


  # nt.common.grafana:
  #   image: grafana/grafana
  #   hostname: nt.common.grafana
  #   container_name: nt.common.grafana
  #   volumes:
  #     - ./grafana-data/data:/var/lib/grafana
  #   ports:
  #     - "3000:3000"




  nt.common.servicediscovery:
    image: hashicorp/consul
    container_name: nt.common.servicediscovery
    ports:
      - "9500:8500"    # HTTP UI/API
      - "9600:8600/udp" # DNS
    command: agent -dev -client=0.0.0.0
    networks:
        nt.common.network:




volumes:
  nt.authservice.db.volume:
    name: "nt.authservice.db.volume"
  nt.common.portainer.volume:
    name: "nt.common.portainer.volume"
  nt.authservice.log.db.volume:
    name: "nt.authservice.log.db.volume"
  nt.movieservice.db.volume:
    name: "nt.movieservice.db.volume"

networks:
  nt.authservice.network:
   driver: bridge
  nt.userservice.network:
   driver: bridge
  nt.movieservice.network:
   driver: bridge
  nt.reviewservice.network:
   driver: bridge
  nt.common.network:
   driver: bridge


